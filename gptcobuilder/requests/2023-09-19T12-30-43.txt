{
  "request": {
    "apiKey": "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",
    "model": "gpt-4",
    "role": "user",
    "content": "This is an electron project that aims to let users quickly create and iterate on applications.\n\nC:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\generate.html\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>GPT CoBuilder</title>\n    <link rel=\"stylesheet\" href=\"generate.css\" />\n  </head>\n  <body>\n    <div class=\"tab\">\n      <button class=\"tablinks\" onclick=\"openTab(event, 'Settings')\">Settings</button>\n      <button id=\"changeRequestTab\" class=\"tablinks\" onclick=\"openTab(event, 'ChangeRequest')\">Change Request</button>\n      <button class=\"tablinks\" onclick=\"openTab(event, 'ChangeResponse')\">Change Response</button>\n      <button class=\"tablinks\" onclick=\"openTab(event, 'Convert')\">Convert</button>\n      <button class=\"tablinks\" id=\"add-tab-button\">+</button>\n    </div>\n    \n    <!-- Tab content -->\n    <div id=\"Settings\" class=\"tabcontent\">\n      <!-- Input field for ChatGPT API key -->\n      <label for=\"api-key\">ChatGPT API Key:</label>\n      <input type=\"text\" id=\"api-key\" />\n\n      <!-- Input field for folder selection -->\n      <label for=\"folder-selection\">Select a Folder:</label>\n      <button id=\"folder-selection\">Project folder</button>\n      <!-- Display Selected Folder -->\n      <span id=\"folder-display\"></span>\n      \n      <!-- Textarea for project description -->\n      <label for=\"project-description\">Project Description:</label>\n      <textarea id=\"project-description\" rows=\"5\">This is an electron project that aims to let users quickly create and iterate on applications.</textarea>\n    </div>\n\n    <div id=\"ChangeRequest\" class=\"tabcontent\">\n      <!-- Include Refresh File List Button -->\n      <button id=\"refresh-filelist\">Refresh File List</button>\n      \n      <!-- Element to display the file structure -->\n      <pre id=\"file-structure\"></pre>\n        \n      <!-- Input field for system message -->\n      <label for=\"system-message\">System Message:</label>\n      <textarea id=\"system-message\" rows=\"5\" >You are a good programmer and you should do your best to suggest complete code changes to achieve the users goal. \n\nSuggest changes to the right files. If you need to change multiple files, include which code belongs in which file. Try to place new code in a new file if it makes sense.</textarea>\n\n      <!-- Div for generated message -->\n      <div id=\"generated-message-div\">\n        <label for=\"generated-message\">Generated Message:</label>\n        <textarea id=\"generated-message\" class=\"generated-message\" rows=\"20\" disabled></textarea>\n      </div>\n\n      <!-- Input field for user message -->\n      <label for=\"user-message\">User Message:</label>\n      <textarea id=\"user-message\" rows=\"5\" ></textarea>\n\n      <!-- Div for full message -->\n      <div>\n        <label for=\"full-message\">Full Message:</label>\n        <textarea id=\"full-message\" class=\"full-message\" rows=\"20\" disabled></textarea>\n      </div>\n          \n      <!-- Total tokens count -->\n      <div id=\"local-token-count\"></div>\n\n      <!-- Button to trigger GPT completion -->\n      <button class=\"button\" id=\"generate-button\">Generate GPT Completion</button>\n\n      <!-- Element to display errors -->\n      <div id=\"error-log\"></div>\n    </div>\n    \n    <div id=\"ChangeResponse\" class=\"tabcontent\">\n      <!-- Total tokens count -->\n      <div id=\"response-token-count\"></div>\n\n      <!-- Model response -->\n      <label for=\"model-response\">Model response:</label>\n      <textarea id=\"model-response\"></textarea>\n    </div>\n\n    <div id=\"Convert\" class=\"tabcontent\">\n      <!-- Input field for user message -->\n      <label for=\"convert-system-message\">Convert System Message:</label>\n      <textarea id=\"convert-system-message\" rows=\"5\" ></textarea>\n\n      <!-- Input field for user message -->\n      <label for=\"convert-user-message\">Optional Convert User Message:</label>\n      <textarea id=\"convert-user-message\" rows=\"5\" ></textarea>\n\n      <!-- Button to convert change request to files -->\n      <button class=\"button\" id=\"convert-button\" disabled>Convert change request to files</button>\n\n      <!-- Model files response -->\n      <label for=\"model-files-response\">Model response:</label>\n      <textarea id=\"model-files-response\"></textarea>\n\n      <!-- Total tokens count -->\n      <div id=\"files-response-token-count\"></div>\n\n      <!-- Button to apply files automatically -->\n      <button class=\"button\" id=\"apply-button\">Apply files</button>\n    </div>\n    \n    <!-- Add Modal for tab naming -->\n    <div id=\"tabNameModal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <label for=\"tabNameInput\">Name of the tab:</label>\n            <input type=\"text\" id=\"tabNameInput\" />\n            <button id=\"submitTabNameButton\">Submit</button>\n        </div>\n    </div>\n\n    <script src=\"apiOperations.js\"></script>\n    <script src=\"fileOperations.js\"></script>\n    <script src=\"tabOperations.js\"></script>\n    <script src=\"eventListeners.js\"></script>\n    <script src=\"modalOperations.js\"></script>\n    <script src=\"generate.js\"></script>\n  </body>\n</html>\n\n```\n\nC:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\fileOperations.js\n```\n// Function to display file structure\nconst displayFileStructure = (fileList) => {\n    fileContentMap.clear(); // Add this line to clear fileContentMap\n    const fileStructure = document.getElementById('file-structure');\n\n    fileStructure.textContent = ''; // Clear any previous content\n  \n    // Get the selected folder from localStorage\n    const savedFolder = localStorage.getItem('folder');\n  \n    for (let i = 0; i < fileList.length; i++) {\n      const file = fileList[i];\n      let filePath = file.path;\n  \n      if (savedFolder) {\n        // Display only the path relative to the selected folder\n        filePath = path.relative(savedFolder, filePath);\n      }\n  \n      const fileEntry = document.createElement('div');\n      fileEntry.className = 'file-entry';\n  \n      // Create checkbox\n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.id = `file-checkbox-${i}`;\n  \n      checkbox.addEventListener('change', () => {\n        if (checkbox.checked) {\n          readFileContent(file)\n            .then(content => {\n              fileContentMap.set(file, content);\n              updateGeneratedMessageContent();\n            })\n            .catch(error => {\n              console.error(error);\n            });\n        } else {\n          fileContentMap.delete(file);\n          updateGeneratedMessageContent();\n        }\n      });\n  \n      // Create label for checkbox\n      const label = document.createElement('label');\n      label.setAttribute('for', `file-checkbox-${i}`);\n      label.textContent = filePath;\n  \n      fileEntry.appendChild(checkbox);\n      fileEntry.appendChild(label);\n  \n      fileStructure.appendChild(fileEntry);\n    }\n  };\n  \n// Read the content of a file\nconst readFileContent = async (file) => {\n  return await window.fs.readFile(file.path);\n};\n\n// Function to save HTTP request and response to a file\nasync function logRequestAndResponse(apiKey, model, role, content, response) {\n  try {\n    const currentTime = new Date(); // Get current date and time\n    let formattedTime = toLocalISOString(currentTime); // Format the time in the required format\n    formattedTime = formattedTime.replace(/:/g, '-'); // Replace colons with dashes\n    const filename = `${localStorage.getItem('folder')}/gptcobuilder/requests/${formattedTime}.txt`; // Form the filename\n    \n    const fileContent = {};\n    fileContent['request'] = {apiKey, model, role, content};\n    fileContent['response'] = response;\n\n    // Save the request and response to the file\n    await window.fs.saveFile(filename, JSON.stringify(fileContent, null, 2)); // The second argument of JSON.stringify is a replacer function which we don't need and the third argument is the number of spaces for indentation\n    console.log(`Request and response logged to ${filename}`);\n  } catch (error) {\n    console.error('Error logging request and response: ', error);\n  }\n}\n  \nconst filterFilesByGitignore = async (fileList) => {\n  let fileListArray = Array.from(fileList);\n\n  try {\n    // Find the .gitignore file in the fileListArray\n    const gitignoreFile = fileListArray.find(file => file.path.endsWith('.gitignore'));\n    if (!gitignoreFile) {\n      return fileListArray;\n    }\n\n    // Read the .gitignore file content\n    gitignoreContent = await readFileContent(gitignoreFile) + \"\\n.git/\";\n    gitignore = gitignoreParser.compile(gitignoreContent);\n\n    // Filter out files based on .gitignore rules\n    return fileListArray.filter(file => {\n      const filePath = file.path;\n      const normalizedFilePath = path.relative(path.dirname(gitignoreFile.path), filePath).replaceAll(\"\\\\\", \"/\");\n      return gitignore.accepts(normalizedFilePath);\n    });\n  } catch (error) {\n    console.error('Error reading .gitignore:', error);\n    return fileListArray;\n  }\n};\n\nasync function updateFolder (folder) {\n  if (folder) {\n    localStorage.setItem('folder', folder);\n    document.getElementById('folder-display').textContent = ` Selected Folder: ${folder}`;\n\n    const dirPath = `${folder}/gptcobuilder`;\n    if(!await fs.exists(dirPath)){\n      await fs.mkdir(dirPath);\n    }\n\n    const dirPathRequests = `${folder}/gptcobuilder/requests`;\n    if(!await fs.exists(dirPathRequests)){\n      await fs.mkdir(dirPathRequests);\n    }\n    \n    // Update the file list\n    let filteredFileList = await getFilesInFolderWithFilter(folder);\n    displayFileStructure(filteredFileList);\n\n    // Load the projectDescription\n    const projectDescriptionFilePath = `${folder}/gptcobuilder/project_description.txt`;\n    const projectDescription = await window.fs.readFile(projectDescriptionFilePath);\n    document.getElementById('project-description').value = projectDescription;\n  }\n};\n\nasync function getFilesInFolderWithFilter(folder) {\n  const filePaths = await window.fs.getFilesInDirectory(folder);\n  const fileEntries = filePaths.map(filePath => ({name: path.basename(filePath), path: filePath}));\n  return await filterFilesByGitignore(fileEntries);\n}\n\n```\n\nC:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\eventListeners.js\n```\n// Attach event listener to the button\nconst generateButton = document.getElementById('generate-button');\nconst refreshButton = document.getElementById('refresh-filelist');\nconst convertButton = document.getElementById('convert-button');\nconst errorLog = document.getElementById('error-log');\nconst reponseField = document.getElementById('model-response');\n\nfunction clearErrorLog() {\n  errorLog.textContent = \"\";\n}\n\ngenerateButton.addEventListener('click', () => {\n  openTab(event, 'ChangeResponse');\n  \n  reponseField.disabled = true;\n  generateButton.disabled = true;\n  convertButton.disabled = true;\n  \n  sendMessageToChatGPT()\n  .then(response => {\n    console.log('Assistant:', response);\n    reponseField.disabled = false;\n    generateButton.disabled = false;\n    convertButton.disabled = false;\n\n    clearErrorLog();\n    displayAssistantResponse(response);\n  })\n  .catch(error => {\n    errorLog.textContent = `Error: ${error.message}`;\n    reponseField.disabled = false;\n    generateButton.disabled = false;\n    convertButton.disabled = false;\n  });\n});\n\n // Attach event listener to refresh button\nrefreshButton.addEventListener('click', async () => {\n  const savedFolder = localStorage.getItem('folder');\n  if (savedFolder) {\n    clearSelectedFiles();\n    await updateFolder(savedFolder);\n  }\n});\n\n// Add an event listener to Apply files button\nconst applyButton = document.getElementById('apply-button');\napplyButton.addEventListener('click', () => {\n  refreshButton.click();\n});\n\nconvertButton.addEventListener('click', () => {\n  convertButton.disabled = true;\n  convertChangeRequestToFiles();\n});\n\n```\n\nIn the settings tab, you can add a dropdown for the user to select the model. This change belongs in the `src\\view\\generate.html` file. Just under the 'Project Description' section you can add:\n\n```html\n<!-- Dropdown for selecting a model -->\n<label for=\"model-selection\">Select a model:</label>\n<select id=\"model-selection\">\n    <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo</option>\n    <option value=\"gpt-3.5-turbo-16k\">gpt-3.5-turbo-16k</option>\n    <option value=\"gpt-4\">gpt-4</option>\n    <option value=\"gpt-4-32k\">gpt-4-32k</option>\n</select>\n```\n\nIn order to save and load the selected model in a settings file add the following functions to your 'src\\view\\fileOperations.js' file:\n\n```javascript\nasync function saveSettings(settings) {\n    const settingsFilePath = `${localStorage.getItem('folder')}/gptcobuilder/settings.json`;\n    try {\n        await window.fs.saveFile(settingsFilePath, JSON.stringify(settings, null, 2));\n    } catch (error) {\n        console.error('Error saving settings file:', error);\n    }\n}\n\nasync function loadSettings() {\n    const settingsFilePath = `${localStorage.getItem('folder')}/gptcobuilder/settings.json`;\n    try {\n        const settingsJSON = await window.fs.readFile(settingsFilePath);\n        return JSON.parse(settingsJSON);\n    } catch (error) {\n        console.error('Error loading settings file:', error);\n    }\n    return null;\n}\n```\n\nThis will save and load a json object to and from a file. In the `updateFolder` function call `loadSettings` to fill in the settings after the file list is updated:\n\n```javascript\nasync function updateFolder (folder) {\n\n     //... existing code ...\n\n    // Load the settings\n    const settings = await loadSettings();\n    if (settings && settings.modelSelection) {\n        document.getElementById('model-selection').value = settings.modelSelection;\n    }\n};\n\n```\n\nNow whenever the model selection changes, save the new selection to the settings file. Add the following code to 'src\\view\\eventListeners.js':\n\n```javascript\nconst modelSelection = document.getElementById('model-selection');\nmodelSelection.addEventListener('change', async () => {\n    const settings = { modelSelection: modelSelection.value };\n    await saveSettings(settings);\n});\n```\n\nNow the selected model will be saved and loaded from the 'gptcobuilder' directory. The setting will persist across sessions and be updated whenever the selection is changed.\n\nRemember to put the modelSelection setting value in your `sendMessageToChatGPT()` function where you initialize the model:\n\n```javascript\nconst sendMessageToChatGPT = async () => {\n    //... existing code ...\n\n    // use modelSelection setting in configuration\n    const settings = await loadSettings();\n    const model = settings ? settings.modelSelection : 'gpt-3.5-turbo';\n\n    //... existing code ...\n}\n```\n\n"
  },
  "response": {
    "id": "chatcmpl-80SDeU3jSYVKJ5rVPdqItcK532M4X",
    "object": "chat.completion",
    "created": 1695119166,
    "model": "gpt-4-0613",
    "choices": [
      {
        "index": 0,
        "message": {
          "role": "assistant",
          "content": "C:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\generate.html\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>GPT CoBuilder</title>\n    <link rel=\"stylesheet\" href=\"generate.css\" />\n  </head>\n  <body>\n    <div class=\"tab\">\n      <button class=\"tablinks\" onclick=\"openTab(event, 'Settings')\">Settings</button>\n      <button id=\"changeRequestTab\" class=\"tablinks\" onclick=\"openTab(event, 'ChangeRequest')\">Change Request</button>\n      <button class=\"tablinks\" onclick=\"openTab(event, 'ChangeResponse')\">Change Response</button>\n      <button class=\"tablinks\" onclick=\"openTab(event, 'Convert')\">Convert</button>\n      <button class=\"tablinks\" id=\"add-tab-button\">+</button>\n    </div>\n    \n    <!-- Tab content -->\n    <div id=\"Settings\" class=\"tabcontent\">\n      <!-- Input field for ChatGPT API key -->\n      <label for=\"api-key\">ChatGPT API Key:</label>\n      <input type=\"text\" id=\"api-key\" />\n\n      <!-- Input field for folder selection -->\n      <label for=\"folder-selection\">Select a Folder:</label>\n      <button id=\"folder-selection\">Project folder</button>\n      <!-- Display Selected Folder -->\n      <span id=\"folder-display\"></span>\n      \n      <!-- Textarea for project description -->\n      <label for=\"project-description\">Project Description:</label>\n      <textarea id=\"project-description\" rows=\"5\">This is an electron project that aims to let users quickly create and iterate on applications.</textarea>\n\n      <!-- Dropdown for selecting a model -->\n      <label for=\"model-selection\">Select a model:</label>\n      <select id=\"model-selection\">\n          <option value=\"gpt-3.5-turbo\">gpt-3.5-turbo</option>\n          <option value=\"gpt-3.5-turbo-16k\">gpt-3.5-turbo-16k</option>\n          <option value=\"gpt-4\">gpt-4</option>\n          <option value=\"gpt-4-32k\">gpt-4-32k</option>\n      </select>\n    </div>\n\n    <div id=\"ChangeRequest\" class=\"tabcontent\">\n      <!-- Include Refresh File List Button -->\n      <button id=\"refresh-filelist\">Refresh File List</button>\n      \n      <!-- Element to display the file structure -->\n      <pre id=\"file-structure\"></pre>\n        \n      <!-- Input field for system message -->\n      <label for=\"system-message\">System Message:</label>\n      <textarea id=\"system-message\" rows=\"5\" >You are a good programmer and you should do your best to suggest complete code changes to achieve the users goal. \n\nSuggest changes to the right files. If you need to change multiple files, include which code belongs in which file. Try to place new code in a new file if it makes sense.</textarea>\n\n      <!-- Div for generated message -->\n      <div id=\"generated-message-div\">\n        <label for=\"generated-message\">Generated Message:</label>\n        <textarea id=\"generated-message\" class=\"generated-message\" rows=\"20\" disabled></textarea>\n      </div>\n\n      <!-- Input field for user message -->\n      <label for=\"user-message\">User Message:</label>\n      <textarea id=\"user-message\" rows=\"5\" ></textarea>\n\n      <!-- Div for full message -->\n      <div>\n        <label for=\"full-message\">Full Message:</label>\n        <textarea id=\"full-message\" class=\"full-message\" rows=\"20\" disabled></textarea>\n      </div>\n          \n      <!-- Total tokens count -->\n      <div id=\"local-token-count\"></div>\n\n      <!-- Button to trigger GPT completion -->\n      <button class=\"button\" id=\"generate-button\">Generate GPT Completion</button>\n\n      <!-- Element to display errors -->\n      <div id=\"error-log\"></div>\n    </div>\n    \n    <div id=\"ChangeResponse\" class=\"tabcontent\">\n      <!-- Total tokens count -->\n      <div id=\"response-token-count\"></div>\n\n      <!-- Model response -->\n      <label for=\"model-response\">Model response:</label>\n      <textarea id=\"model-response\"></textarea>\n    </div>\n\n    <div id=\"Convert\" class=\"tabcontent\">\n      <!-- Input field for user message -->\n      <label for=\"convert-system-message\">Convert System Message:</label>\n      <textarea id=\"convert-system-message\" rows=\"5\" ></textarea>\n\n      <!-- Input field for user message -->\n      <label for=\"convert-user-message\">Optional Convert User Message:</label>\n      <textarea id=\"convert-user-message\" rows=\"5\" ></textarea>\n\n      <!-- Button to convert change request to files -->\n      <button class=\"button\" id=\"convert-button\" disabled>Convert change request to files</button>\n\n      <!-- Model files response -->\n      <label for=\"model-files-response\">Model response:</label>\n      <textarea id=\"model-files-response\"></textarea>\n\n      <!-- Total tokens count -->\n      <div id=\"files-response-token-count\"></div>\n\n      <!-- Button to apply files automatically -->\n      <button class=\"button\" id=\"apply-button\">Apply files</button>\n    </div>\n    \n    <!-- Add Modal for tab naming -->\n    <div id=\"tabNameModal\" class=\"modal\">\n        <div class=\"modal-content\">\n            <label for=\"tabNameInput\">Name of the tab:</label>\n            <input type=\"text\" id=\"tabNameInput\" />\n            <button id=\"submitTabNameButton\">Submit</button>\n        </div>\n    </div>\n\n    <script src=\"apiOperations.js\"></script>\n    <script src=\"fileOperations.js\"></script>\n    <script src=\"tabOperations.js\"></script>\n    <script src=\"eventListeners.js\"></script>\n    <script src=\"modalOperations.js\"></script>\n    <script src=\"generate.js\"></script>\n  </body>\n</html>\n```\n\nC:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\fileOperations.js\n```\n// Function to display file structure\nconst displayFileStructure = (fileList) => {\n    fileContentMap.clear(); // Add this line to clear fileContentMap\n    const fileStructure = document.getElementById('file-structure');\n\n    fileStructure.textContent = ''; // Clear any previous content\n  \n    // Get the selected folder from localStorage\n    const savedFolder = localStorage.getItem('folder');\n  \n    for (let i = 0; i < fileList.length; i++) {\n      const file = fileList[i];\n      let filePath = file.path;\n  \n      if (savedFolder) {\n        // Display only the path relative to the selected folder\n        filePath = path.relative(savedFolder, filePath);\n      }\n  \n      const fileEntry = document.createElement('div');\n      fileEntry.className = 'file-entry';\n  \n      // Create checkbox\n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.id = `file-checkbox-${i}`;\n  \n      checkbox.addEventListener('change', () => {\n        if (checkbox.checked) {\n          readFileContent(file)\n            .then(content => {\n              fileContentMap.set(file, content);\n              updateGeneratedMessageContent();\n            })\n            .catch(error => {\n              console.error(error);\n            });\n        } else {\n          fileContentMap.delete(file);\n          updateGeneratedMessageContent();\n        }\n      });\n  \n      // Create label for checkbox\n      const label = document.createElement('label');\n      label.setAttribute('for', `file-checkbox-${i}`);\n      label.textContent = filePath;\n  \n      fileEntry.appendChild(checkbox);\n      fileEntry.appendChild(label);\n  \n      fileStructure.appendChild(fileEntry);\n    }\n  };\n  \n// Read the content of a file\nconst readFileContent = async (file) => {\n  return await window.fs.readFile(file.path);\n};\n\n// Function to save HTTP request and response to a file\nasync function logRequestAndResponse(apiKey, model, role, content, response) {\n  try {\n    const currentTime = new Date(); // Get current date and time\n    let formattedTime = toLocalISOString(currentTime); // Format the time in the required format\n    formattedTime = formattedTime.replace(/:/g, '-'); // Replace colons with dashes\n    const filename = `${localStorage.getItem('folder')}/gptcobuilder/requests/${formattedTime}.txt`; // Form the filename\n    \n    const fileContent = {};\n    fileContent['request'] = {apiKey, model, role, content};\n    fileContent['response'] = response;\n\n    // Save the request and response to the file\n    await window.fs.saveFile(filename, JSON.stringify(fileContent, null, 2)); // The second argument of JSON.stringify is a replacer function which we don't need and the third argument is the number of spaces for indentation\n    console.log(`Request and response logged to ${filename}`);\n  } catch (error) {\n    console.error('Error logging request and response: ', error);\n  }\n}\n  \nconst filterFilesByGitignore = async (fileList) => {\n  let fileListArray = Array.from(fileList);\n\n  try {\n    // Find the .gitignore file in the fileListArray\n    const gitignoreFile = fileListArray.find(file => file.path.endsWith('.gitignore'));\n    if (!gitignoreFile) {\n      return fileListArray;\n    }\n\n    // Read the .gitignore file content\n    gitignoreContent = await readFileContent(gitignoreFile) + \"\\n.git/\";\n    gitignore = gitignoreParser.compile(gitignoreContent);\n\n    // Filter out files based on .gitignore rules\n    return fileListArray.filter(file => {\n      const filePath = file.path;\n      const normalizedFilePath = path.relative(path.dirname(gitignoreFile.path), filePath).replaceAll(\"\\\\\", \"/\");\n      return gitignore.accepts(normalizedFilePath);\n    });\n  } catch (error) {\n    console.error('Error reading .gitignore:', error);\n    return fileListArray;\n  }\n};\n\nasync function updateFolder (folder) {\n  if (folder) {\n    localStorage.setItem('folder', folder);\n    document.getElementById('folder-display').textContent = ` Selected Folder: ${folder}`;\n\n    const dirPath = `${folder}/gptcobuilder`;\n    if(!await fs.exists(dirPath)){\n      await fs.mkdir(dirPath);\n    }\n\n    const dirPathRequests = `${folder}/gptcobuilder/requests`;\n    if(!await fs.exists(dirPathRequests)){\n      await fs.mkdir(dirPathRequests);\n    }\n    \n    // Update the file list\n    let filteredFileList = await getFilesInFolderWithFilter(folder);\n    displayFileStructure(filteredFileList);\n\n    // Load the projectDescription\n    const projectDescriptionFilePath = `${folder}/gptcobuilder/project_description.txt`;\n    const projectDescription = await window.fs.readFile(projectDescriptionFilePath);\n    document.getElementById('project-description').value = projectDescription;\n\n    // Load the settings\n    const settings = await loadSettings();\n    if (settings && settings.modelSelection) {\n        document.getElementById('model-selection').value = settings.modelSelection;\n    }\n  }\n};\n\nasync function getFilesInFolderWithFilter(folder) {\n  const filePaths = await window.fs.getFilesInDirectory(folder);\n  const fileEntries = filePaths.map(filePath => ({name: path.basename(filePath), path: filePath}));\n  return await filterFilesByGitignore(fileEntries);\n}\n\nasync function saveSettings(settings) {\n    const settingsFilePath = `${localStorage.getItem('folder')}/gptcobuilder/settings.json`;\n    try {\n        await window.fs.saveFile(settingsFilePath, JSON.stringify(settings, null, 2));\n    } catch (error) {\n        console.error('Error saving settings file:', error);\n    }\n}\n\nasync function loadSettings() {\n    const settingsFilePath = `${localStorage.getItem('folder')}/gptcobuilder/settings.json`;\n    try {\n        const settingsJSON = await window.fs.readFile(settingsFilePath);\n        return JSON.parse(settingsJSON);\n    } catch (error) {\n        console.error('Error loading settings file:', error);\n    }\n    return null;\n}\n```\n\nC:\\Users\\alema\\Documents\\ChatGPT\\GPT-CoBuilder\\my-app\\src\\view\\eventListeners.js\n```\n// Attach event listener to the button\nconst generateButton = document.getElementById('generate-button');\nconst refreshButton = document.getElementById('refresh-filelist');\nconst convertButton = document.getElementById('convert-button');\nconst errorLog = document.getElementById('error-log');\nconst reponseField = document.getElementById('model-response');\nconst modelSelection = document.getElementById('model-selection');\n\nfunction clearErrorLog() {\n  errorLog.textContent = \"\";\n}\n\ngenerateButton.addEventListener('click', () => {\n  openTab(event, 'ChangeResponse');\n  \n  reponseField.disabled = true;\n  generateButton.disabled = true;\n  convertButton.disabled = true;\n  \n  sendMessageToChatGPT()\n  .then(response => {\n    console.log('Assistant:', response);\n    reponseField.disabled = false;\n    generateButton.disabled = false;\n    convertButton.disabled = false;\n\n    clearErrorLog();\n    displayAssistantResponse(response);\n  })\n  .catch(error => {\n    errorLog.textContent = `Error: ${error.message}`;\n    reponseField.disabled = false;\n    generateButton.disabled = false;\n    convertButton.disabled = false;\n  });\n});\n\n // Attach event listener to refresh button\nrefreshButton.addEventListener('click', async () => {\n  const savedFolder = localStorage.getItem('folder');\n  if (savedFolder) {\n    clearSelectedFiles();\n    await updateFolder(savedFolder);\n  }\n});\n\n// Add an event listener to Apply files button\nconst applyButton = document.getElementById('apply-button');\napplyButton.addEventListener('click', () => {\n  refreshButton.click();\n});\n\nconvertButton.addEventListener('click', () => {\n  convertButton.disabled = true;\n  convertChangeRequestToFiles();\n});\n\nmodelSelection.addEventListener('change', async () => {\n    const settings = { modelSelection: modelSelection.value };\n    await saveSettings(settings);\n});\n```"
        },
        "finish_reason": "stop"
      }
    ],
    "usage": {
      "prompt_tokens": 3375,
      "completion_tokens": 2939,
      "total_tokens": 6314
    }
  }
}